{
	"info": {
		"_postman_id": "0eb319f5-69ab-4e9c-86a7-d4932925dfae",
		"name": "UserAPI Project October 2024",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37634103"
	},
	"item": [
		{
			"name": "POST Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate Status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Verify Response contains user_Id\", function () {\r",
							"  pm.expect(pm.response.json()).to.have.property(\"user_id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Status code name has -Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Data Types of the fields in the Response\", () => {\r",
							"   pm.expect(jsonData.userAddress).to.be.an(\"object\");\r",
							"   pm.expect(jsonData.userAddress.addressId).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.userAddress.plotNumber).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.street).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.state).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.country).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.zipCode).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.user_id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_contact_number).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_email_id).to.be.a(\"string\");\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"Response matches the created user data\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.user_first_name).to.eql(pm.iterationData.get('user_firstName'));\r",
							"    pm.expect(jsonData.user_last_name).to.eql(pm.iterationData.get('userLastName'));\r",
							"    pm.expect(jsonData.user_contact_number).to.eql(parseInt(pm.iterationData.get('contactNumber')));\r",
							"    pm.expect(jsonData.user_email_id).to.eql(pm.iterationData.get('emailID'));\r",
							"});\r",
							"//Schema Validation -\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userAddress\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"addressId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"plotNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"street\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"state\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"country\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"zipCode\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"addressId\",\r",
							"        \"plotNumber\",\r",
							"        \"street\",\r",
							"        \"state\",\r",
							"        \"country\",\r",
							"        \"zipCode\"\r",
							"      ]\r",
							"    },\r",
							"    \"user_id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_first_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_last_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_contact_number\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_email_id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creation_time\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"last_mod_time\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userAddress\",\r",
							"    \"user_id\",\r",
							"    \"user_first_name\",\r",
							"    \"user_last_name\",\r",
							"    \"user_contact_number\",\r",
							"    \"user_email_id\",\r",
							"    \"creation_time\",\r",
							"    \"last_mod_time\"\r",
							"  ]\r",
							"};\r",
							"// Validate the response using the schema\r",
							"pm.test('Response is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// stroring user_id and first_name from the response\r",
							"let responseData = pm.response.json();\r",
							"let userId = responseData.user_id; \r",
							"let firstName = responseData.user_first_name;\r",
							"\r",
							"\r",
							"let userIdsLoc = []; //creating array of user ids\r",
							"userIdsLoc.push(responseData.user_id);\r",
							"pm.environment.set(\"userIds\", JSON.stringify(userIdsLoc));\r",
							"\r",
							"let userFirstNamesLoc = [];//userFirstNames ? JSON.parse(userFirstNames) : []; //creating array of user First Names\r",
							"userFirstNamesLoc.push(responseData.user_first_name);\r",
							"\r",
							"pm.environment.set(\"userFirstNames\", JSON.stringify(userFirstNamesLoc));\r",
							"\r",
							"console.log(\" userIds array: \", userIdsLoc);\r",
							"console.log(\" userFirstNames array: \", userFirstNamesLoc);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":\"{{user_firstName}}\",\r\n\"user_last_name\":\"{{userLastName}}\",\r\n\"user_contact_number\": {{contactNumber}},\r\n\"user_email_id\":\"{{emailID}}\",\r\n\"userAddress\":{\r\n\"plotNumber\":\"{{plotNumber}}\",\r\n\"street\":\"{{street}}\",\r\n\"state\":\"{{state}}\",\r\n\"country\":\"{{country}}\",\r\n\"zipCode\":{{zipcode}}\r\n}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{createEndpoint}}",
					"host": [
						"{{baseURL}}{{createEndpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Data Types of the fields in the Response\", () => {\r",
							"    \r",
							"   pm.expect(jsonData.userAddress).to.be.an(\"object\");\r",
							"   pm.expect(jsonData.userAddress.addressId).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.userAddress.plotNumber).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.street).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.state).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.country).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.zipCode).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.user_id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_contact_number).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_email_id).to.be.a(\"string\");\r",
							"    });\r",
							"\r",
							"\r",
							"pm.test(\"Validate Response time is within 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userIds = pm.environment.get(\"userIds\");\r",
							"userIds = userIds ? JSON.parse(userIds) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userIds.length > 0) {\r",
							"  let UserID = userIds[0];  \r",
							"\r",
							"  pm.environment.set(\"user_ID\", UserID);\r",
							"  pm.environment.set(\"userIds\", JSON.stringify(userIds));\r",
							"  \r",
							"  console.log(\"Current User ID for GET request: \", UserID);\r",
							"} else {\r",
							"   \r",
							"  pm.environment.unset(\"UserID\");\r",
							"  console.log(\"No more User IDs left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{getByIDEndpoint}}/{{user_ID}}",
					"host": [
						"{{baseURL}}{{getByIDEndpoint}}"
					],
					"path": [
						"{{user_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User By ID-Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate Response status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userIds = pm.environment.get(\"userIds\");\r",
							"userIds = userIds ? JSON.parse(userIds) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userIds.length > 0) {\r",
							"  let UserID = userIds[0];  \r",
							"\r",
							"  pm.environment.set(\"user_ID\", UserID);\r",
							"  pm.environment.set(\"userIds\", JSON.stringify(userIds));\r",
							"  \r",
							"  console.log(\"Current User ID for GET request: \", UserID);\r",
							"} else {\r",
							"   \r",
							"  pm.environment.unset(\"UserID\");\r",
							"  console.log(\"No more User IDs left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{getByIDEndpoint}}/abcd",
					"host": [
						"{{baseURL}}{{getByIDEndpoint}}"
					],
					"path": [
						"abcd"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User By FirstName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userFirstNames = pm.environment.get(\"userFirstNames\");\r",
							"userFirstNames = userFirstNames ? JSON.parse(userFirstNames) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userFirstNames.length > 0) {\r",
							"  let Fname = userFirstNames[0];  // Take the user first Name\r",
							"  \r",
							"  // Set the userName in an environment variable to use in the GET request\r",
							"  pm.environment.set(\"firstName\", Fname);\r",
							"  \r",
							"  // Store the updated array back in the environment (without the processed Fname)\r",
							"  pm.environment.set(\"userFirstNames\", JSON.stringify(userFirstNames));\r",
							"  \r",
							"  // Log the current userId being processed\r",
							"  console.log(\"Current First Name for GET request: \", Fname);\r",
							"} else {\r",
							"  // If no user IDs left, clear the environment variable\r",
							"  pm.environment.unset(\"Fname\");\r",
							"  console.log(\"No more First names left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							" \r",
							"pm.test(\"Verify Data Types of the fields in the Response\", () => {\r",
							"   pm.expect(jsonData.userAddress).to.be.an(\"object\");\r",
							"   pm.expect(jsonData.userAddress.addressId).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.userAddress.plotNumber).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.street).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.state).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.country).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.zipCode).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.user_id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_contact_number).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_email_id).to.be.a(\"string\");\r",
							"    });\r",
							"//Schema Validation -\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userAddress\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"addressId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"plotNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"street\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"state\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"country\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"zipCode\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"addressId\",\r",
							"        \"plotNumber\",\r",
							"        \"street\",\r",
							"        \"state\",\r",
							"        \"country\",\r",
							"        \"zipCode\"\r",
							"      ]\r",
							"    },\r",
							"    \"user_id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_first_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_last_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_contact_number\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_email_id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creation_time\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"last_mod_time\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userAddress\",\r",
							"    \"user_id\",\r",
							"    \"user_first_name\",\r",
							"    \"user_last_name\",\r",
							"    \"user_contact_number\",\r",
							"    \"user_email_id\",\r",
							"    \"creation_time\",\r",
							"    \"last_mod_time\"\r",
							"  ]\r",
							"};\r",
							"// Validate the response using the schema\r",
							"pm.test('Response is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{getByFnameEndpoint}}/{{firstName}}",
					"host": [
						"{{baseURL}}{{getByFnameEndpoint}}"
					],
					"path": [
						"{{firstName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User By FirstName-Invalid FirstName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userFirstNames = pm.environment.get(\"userFirstNames\");\r",
							"userFirstNames = userFirstNames ? JSON.parse(userFirstNames) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userFirstNames.length > 0) {\r",
							"  let Fname = userFirstNames[0];  // Take the user first Name\r",
							"  \r",
							"  // Set the userName in an environment variable to use in the GET request\r",
							"  pm.environment.set(\"firstName\", Fname);\r",
							"  \r",
							"  // Store the updated array back in the environment (without the processed Fname)\r",
							"  pm.environment.set(\"userFirstNames\", JSON.stringify(userFirstNames));\r",
							"  \r",
							"  // Log the current userId being processed\r",
							"  console.log(\"Current First Name for GET request: \", Fname);\r",
							"} else {\r",
							"  // If no user IDs left, clear the environment variable\r",
							"  pm.environment.unset(\"Fname\");\r",
							"  console.log(\"No more First names left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{getByFnameEndpoint}}/@%^&",
					"host": [
						"{{baseURL}}{{getByFnameEndpoint}}"
					],
					"path": [
						"@%^&"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"//Schema Validation -\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userAddress\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"addressId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"plotNumber\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"street\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"state\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"country\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"zipCode\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"addressId\",\r",
							"        \"plotNumber\",\r",
							"        \"street\",\r",
							"        \"state\",\r",
							"        \"country\",\r",
							"        \"zipCode\"\r",
							"      ]\r",
							"    },\r",
							"    \"user_id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_first_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_last_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_contact_number\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"user_email_id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creation_time\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"last_mod_time\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userAddress\",\r",
							"    \"user_id\",\r",
							"    \"user_first_name\",\r",
							"    \"user_last_name\",\r",
							"    \"user_contact_number\",\r",
							"    \"user_email_id\",\r",
							"    \"creation_time\",\r",
							"    \"last_mod_time\"\r",
							"  ]\r",
							"};\r",
							"// Validate the response using the schema\r",
							"pm.test('Validate Response Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Content-Type header has the value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"content-type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//  array of user IDs\r",
							"let userIdsLoc = [];\r",
							"let userIdsLocVar =  pm.environment.get(\"userIds\"); \r",
							"userIdsLoc= userIdsLocVar ? JSON.parse(userIdsLocVar) : [];\r",
							"//console.log(\"userIdsLoc :\", userIdsLoc)\r",
							"// Get the current index or initialize it to 0\r",
							"let currentIndex = pm.environment.get(\"currentIndex\");\r",
							"//console.log(\"currentIndex :\", currentIndex);\r",
							"//console.log(\"userIdsLoc[currentIndex] :\", userIdsLoc[currentIndex])\r",
							"\r",
							"// Set the current user ID to the next value from the array\r",
							"pm.environment.set(\"userIdIterative\", userIdsLoc[currentIndex]);\r",
							"\r",
							"// Increment the index\r",
							"currentIndex++;\r",
							"\r",
							"// Check if we have more user IDs to process\r",
							"if (currentIndex < userIdsLoc.length) {\r",
							"    // Set the incremented index back to the environment\r",
							"    pm.environment.set(\"currentIndex\", currentIndex);\r",
							"} else {\r",
							"    // Reset the index or stop further requests\r",
							"    pm.environment.set(\"currentIndex\", 0);\r",
							"}\r",
							"\r",
							"// Generate a random 10-digit number\r",
							"let randomNumberContact = Math.floor(1000000000 + Math.random() * 9000000000); \r",
							"\r",
							"// Set the generated number as a variable\r",
							"pm.environment.set(\"contactNumber1\", randomNumberContact);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n                    \"user_first_name\": \"JoeE\",\r\n                    \"user_last_name\": \"QA\",\r\n                    \"user_contact_number\": {{contactNumber1}},\r\n                    \"user_email_id\": \"{{emailID}}\",\r\n                    \"userAddress\": {\r\n                        \"plotNumber\": \"plot-05\",\r\n                        \"street\": \"john\",\r\n                        \"state\": \"texas\",\r\n                        \"country\": \"USA\",\r\n                        \"zipCode\": \"60092\"  // Make zip code a string\r\n                    }\r\n                }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{putEndpoint}}/{{userIdIterative}}",
					"host": [
						"{{baseURL}}{{putEndpoint}}"
					],
					"path": [
						"{{userIdIterative}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update User -Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Status code is 401\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Content-Type header has the value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"content-type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//  array of user IDs\r",
							"let userIdsLoc = [];\r",
							"let userIdsLocVar =  pm.environment.get(\"userIds\"); \r",
							"userIdsLoc= userIdsLocVar ? JSON.parse(userIdsLocVar) : [];\r",
							"\r",
							"// Get the current index or initialize it to 0\r",
							"let currentIndex = pm.environment.get(\"currentIndex\");\r",
							"//console.log(\"currentIndex :\", currentIndex);\r",
							"//console.log(\"userIdsLoc[currentIndex] :\", userIdsLoc[currentIndex])\r",
							"\r",
							"// Set the current user ID to the next value from the array\r",
							"pm.environment.set(\"userIdIterative\", userIdsLoc[currentIndex]);\r",
							"\r",
							"// Increment the index\r",
							"currentIndex++;\r",
							"\r",
							"// Check if we have more user IDs to process\r",
							"if (currentIndex < userIdsLoc.length) {\r",
							"    // Set the incremented index back to the environment\r",
							"    pm.environment.set(\"currentIndex\", currentIndex);\r",
							"} else {\r",
							"    // Reset the index or stop further requests\r",
							"    pm.environment.set(\"currentIndex\", 0);\r",
							"}\r",
							"\r",
							"// Generate a random 10-digit number\r",
							"let randomNumberContact = Math.floor(1000000000 + Math.random() * 9000000000); \r",
							"\r",
							"// Set the generated number as a variable\r",
							"pm.environment.set(\"contactNumber1\", randomNumberContact);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n                    \"user_first_name\": \"JoeE\",\r\n                    \"user_last_name\": \"QA\",\r\n                    \"user_contact_number\": {{contactNumber1}},\r\n                    \"user_email_id\": \"{{emailID}}\",\r\n                    \"userAddress\": {\r\n                        \"plotNumber\": \"plot-05\",\r\n                        \"street\": \"john\",\r\n                        \"state\": \"texas\",\r\n                        \"country\": \"USA\",\r\n                        \"zipCode\": \"60092\"  // Make zip code a string\r\n                    }\r\n                }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{putEndpoint}}/{{userIdIterative}}",
					"host": [
						"{{baseURL}}{{putEndpoint}}"
					],
					"path": [
						"{{userIdIterative}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create User-Invalid endpoint(Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Validate Status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":\"{{user_firstName}}\",\r\n\"user_last_name\":\"{{userLastName}}\",\r\n\"user_contact_number\": {{contactNumber}},\r\n\"user_email_id\":\"{{emailID}}\",\r\n\r\n\"userAddress\":{\r\n\"plotNumber\":\"{{plotNumber}}\",\r\n\"street\":\"{{street}}\",\r\n\"state\":\"{{state}}\",\r\n\"country\":\"{{country}}\",\r\n\"zipCode\":{{zipcode}}\r\n}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{createInvalidEndpoint}}",
					"host": [
						"{{baseURL}}{{createInvalidEndpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.include.all.keys(\r",
							"            'userAddress', 'user_id', 'user_first_name', 'user_last_name', \r",
							"            'user_contact_number', 'user_email_id', 'creation_time', 'last_mod_time'\r",
							"        );\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User address object should exist and have required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.userAddress).to.exist;\r",
							"        pm.expect(user.userAddress).to.be.an('object');\r",
							"        pm.expect(user.userAddress).to.have.property('addressId');\r",
							"        pm.expect(user.userAddress).to.have.property('plotNumber');\r",
							"        pm.expect(user.userAddress).to.have.property('street');\r",
							"        pm.expect(user.userAddress).to.have.property('state');\r",
							"        pm.expect(user.userAddress).to.have.property('country');\r",
							"        pm.expect(user.userAddress).to.have.property('zipCode');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Data Types of the fields in the Response\", () => {\r",
							"   pm.expect(jsonData.userAddress.addressId).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.userAddress.plotNumber).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.street).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.state).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.country).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.userAddress.zipCode).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.user_id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.user_contact_number).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.user_email_id).to.be.a(\"string\");\r",
							"    });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{getAllEndpoint}}",
					"host": [
						"{{baseURL}}{{getAllEndpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the response schema for the DELETE request\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('status').that.is.a('string');\r",
							"  pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userIds = pm.environment.get(\"userIds\");\r",
							"userIds = userIds ? JSON.parse(userIds) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userIds.length > 0) {\r",
							"  let UserID = userIds[0];  \r",
							"\r",
							"  pm.environment.set(\"user_ID\", UserID);\r",
							"  pm.environment.set(\"userIds\", JSON.stringify(userIds));\r",
							"  \r",
							"  console.log(\"Current User ID for DELETE request: \", UserID);\r",
							"} else {\r",
							"   \r",
							"  pm.environment.unset(\"UserID\");\r",
							"  console.log(\"No more User IDs left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{deleteByIDEndpoint}}/{{user_ID}}",
					"host": [
						"{{baseURL}}{{deleteByIDEndpoint}}"
					],
					"path": [
						"{{user_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User By ID -Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Response status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// accessing userIds from array\r",
							"let userIds = pm.environment.get(\"userIds\");\r",
							"userIds = userIds ? JSON.parse(userIds) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userIds.length > 0) {\r",
							"  let UserID = userIds[0];  \r",
							"\r",
							"  pm.environment.set(\"user_ID\", UserID);\r",
							"  pm.environment.set(\"userIds\", JSON.stringify(userIds));\r",
							"  \r",
							"  console.log(\"Current User ID for DELETE request: \", UserID);\r",
							"} else {\r",
							"   \r",
							"  pm.environment.unset(\"UserID\");\r",
							"  console.log(\"No more User IDs left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{deleteByIDEndpoint}}/{{user_ID}}",
					"host": [
						"{{baseURL}}{{deleteByIDEndpoint}}"
					],
					"path": [
						"{{user_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User By FirstName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// getting userIds from array\r",
							"let userFirstNames = pm.environment.get(\"userFirstNames\");\r",
							"userFirstNames = userFirstNames ? JSON.parse(userFirstNames) : [];\r",
							"\r",
							"//traversing through the array\r",
							"if (userFirstNames.length > 0) {\r",
							"  let Fname = userFirstNames[0]; \r",
							"  \r",
							" pm.environment.set(\"firstName\", Fname); // Set the userName in an environment var\r",
							" pm.environment.set(\"userFirstNames\", JSON.stringify(userFirstNames));\r",
							"  \r",
							"  console.log(\"Current First Name for DELETE request: \", Fname);\r",
							"} else {\r",
							"  // If no user IDs left, clear the environment variable\r",
							"  pm.environment.unset(\"Fname\");\r",
							"  console.log(\"No more First names left to process\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate Response has the required fields - status and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "userapi@october",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Numpy@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{deleteByFname}}/{{firstName}}",
					"host": [
						"{{baseURL}}{{deleteByFname}}"
					],
					"path": [
						"{{firstName}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://userserviceapp-f5a54828541b.herokuapp.com/uap",
			"type": "string"
		},
		{
			"key": "createEndpoint",
			"value": "/createusers",
			"type": "string"
		},
		{
			"key": "getByIDEndpoint",
			"value": "/user",
			"type": "string"
		},
		{
			"key": "getByFnameEndpoint",
			"value": "/users/username",
			"type": "string"
		},
		{
			"key": "getAllEndpoint",
			"value": "/users",
			"type": "string"
		},
		{
			"key": "putEndpoint",
			"value": "/updateuser",
			"type": "string"
		},
		{
			"key": "deleteByIDEndpoint",
			"value": "/deleteuser",
			"type": "string"
		},
		{
			"key": "deleteByFname",
			"value": "/deleteuser/username",
			"type": "string"
		},
		{
			"key": "username",
			"value": "Numpy@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "userapi@october",
			"type": "string"
		},
		{
			"key": "createInvalidEndpoint",
			"value": "/create",
			"type": "string"
		}
	]
}